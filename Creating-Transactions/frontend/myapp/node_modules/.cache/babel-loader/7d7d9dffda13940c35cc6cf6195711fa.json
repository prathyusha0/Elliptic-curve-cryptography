{"ast":null,"code":"var _jsxFileName = \"/home/prathyusha/Elliptic-curve-cryptography/Creating-Transactions/frontend/myapp/src/components/Transaction.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Transaction({\n  transaction\n}) {\n  const {\n    input,\n    output\n  } = transaction;\n  const recipients = Object.keys(output);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Transaction\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"From:\", input.address]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 13\n    }, this), recipients.map(recipient => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"To:\", recipient, \"|Sent:\", output[recipient]]\n    }, recipient, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 44\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Transaction;\nexport default Transaction;\n\nvar _c;\n\n$RefreshReg$(_c, \"Transaction\");","map":{"version":3,"sources":["/home/prathyusha/Elliptic-curve-cryptography/Creating-Transactions/frontend/myapp/src/components/Transaction.js"],"names":["React","Transaction","transaction","input","output","recipients","Object","keys","address","map","recipient"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AACA,SAASC,WAAT,CAAqB;AAACC,EAAAA;AAAD,CAArB,EAAmC;AAC/B,QAAM;AAACC,IAAAA,KAAD;AAAOC,IAAAA;AAAP,MAAeF,WAArB;AACA,QAAMG,UAAU,GAACC,MAAM,CAACC,IAAP,CAAYH,MAAZ,CAAjB;AACA,sBACI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA,4BACI;AAAA,0BAAWD,KAAK,CAACK,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAGQH,UAAU,CAACI,GAAX,CAAeC,SAAS,iBAAG;AAAA,wBACnBA,SADmB,YACFN,MAAM,CAACM,SAAD,CADJ;AAAA,OAAUA,SAAV;AAAA;AAAA;AAAA;AAAA,YAA3B,CAHR;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH;;KAfQT,W;AAgBT,eAAeA,WAAf","sourcesContent":["import React from 'react';\nfunction Transaction({transaction}){\n    const {input,output}=transaction;\n    const recipients=Object.keys(output);\n    return (\n        <div className=\"Transaction\">\n            <div>From:{input.address}</div>\n            {\n                recipients.map(recipient=>(<div key={recipient}>\n                    To:{recipient}|Sent:{output[recipient]}\n                </div>))\n            }\n        </div>\n    );\n\n\n}\nexport default Transaction;"]},"metadata":{},"sourceType":"module"}